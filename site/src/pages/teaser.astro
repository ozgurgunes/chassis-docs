---
import type { CollectionEntry } from "astro:content";
import Head from "@components/head/Head.astro";
import { getConfig } from "@libs/config";
import ResponsiveImage from "@layouts/partials/ResponsiveImage.astro";
import type { Layout, LayoutOverridesHTMLAttributes } from "@libs/layout";
import { stripMarkdown } from "@libs/utils";

// The following props can be directly passed to the base layout component from any page or layout extending it,
// e.g. <BaseLayout layout="docs" robots="noindex" />.
type Props = {
  // A specific layout to use for the current page used to determine if some components should be rendered or not.
  // Available layouts are defined in `src/libs/layout.ts`.
  layout?: Layout;
  // An object containing HTML attributes that can be overridden for some HTML elements used in the base layout keyed by
  // HTML element names.
  overrides?: {
    body?: LayoutOverridesHTMLAttributes<"body">;
    // Note that main can also be overridden by the Astro slot named "main" and that the slot will take precedence over
    // any override.
    main?: LayoutOverridesHTMLAttributes<"main">;
  };
  // A string containing the robots meta tag content. If not set, the tag will not be rendered.
  robots?: string;
  // An override for the page title. If not defined, the title will either be the content of the `title` frontmatter
  // property when rendering a markdown page or default back to the one defined in the `config.yml` file.
  title?: string;
} & MarkdownProps;

// The following props are automatically set by Astro (if defined) based on the markdown frontmatter when rendering a
// markdown page. They can be accessed through the `Astro.props.frontmatter` object but note that they won't be set when
// not rendering a markdown page.
type MarkdownProps = { frontmatter?: Partial<CollectionEntry<"blog">["data"]> };

const { frontmatter, layout, overrides, robots } = Astro.props;

const title = Astro.props.title ?? frontmatter?.title ?? getConfig().title;
const description = frontmatter?.description
  ? stripMarkdown(frontmatter.description)
  : getConfig().description;
const thumbnail = frontmatter?.thumbnail
  ? `img/${frontmatter.thumbnail}`
  : "logo/chassis-logo-default.svg";

const bodyProps = overrides?.body ?? {};
const mainProps = overrides?.main ?? {};
---

<Head
  description={description}
  direction={frontmatter?.direction}
  layout={layout}
  robots={robots}
  thumbnail={thumbnail}
  title={title}
/>
  <div class="container d-flex vh-100 align-items-center py-6xlarge">
    <div class="row py-6xlarge mt-n6xlarge">
      <div class="col-8 offset-2 text-center py-6xlarge mt-n6xlarge">
        <ResponsiveImage imgPath="/assets/logo/chassis-logo-brand.png" alt="Chassis UI" classes="mb-6xlarge  mt-n6xlarge" />
        <h1 class="font-hero mb-4xlarge mt-4xlarge"><span class="text-nowrap">Build Better Design Systems.</span> In Sync. At Scale.</h1>
        <p class="font-lead mb-6xlarge">
          Chassis is the backbone of scalable design systems built for complex,
          evolving product ecosystems. It unifies Figma components, advanced
          design tokens, multi-platform transformers, asset libraries, and a
          fully token-synced CSS framework — all working in harmony across
          brands, platforms, and products.
        </p>
        <p class="font-2xlarge font-strong fg-slight subtle pt-6xlarge">Launching Soon</p>
      </div>
    </div>
  </div>
