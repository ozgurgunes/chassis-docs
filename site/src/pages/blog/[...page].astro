---
import type { Page } from 'astro'
import BaseLayout from '@layouts/BaseLayout.astro'
import { blogPages } from '@libs/content'
import { getConfig } from '@libs/config'

export async function getStaticPaths({ paginate }: any) {
  const config = getConfig()
  
  // Sort blog posts by publication date (newest first)
  const sortedPosts = blogPages.sort((a, b) => {
    const dateA = new Date(a.data.pubDate || 0)
    const dateB = new Date(b.data.pubDate || 0)
    return dateB.getTime() - dateA.getTime()
  })

  return paginate(sortedPosts, { 
    pageSize: config.blog.pageSize
  })
}

type Props = {
  page: Page<any>
}

const { page } = Astro.props

// Format date helper
function formatDate(date: Date | string): string {
  const d = new Date(date)
  return d.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })
}

// Calculate reading time (rough estimate)
function getReadingTime(content: string): string {
  const wordsPerMinute = 200
  const words = content.split(/\s+/).length
  const minutes = Math.ceil(words / wordsPerMinute)
  return `${minutes} min read`
}

// Generate blog post URL with date structure
function getBlogPostUrl(post: any): string {
  const pubDate = new Date(post.data.pubDate || Date.now())
  const year = pubDate.getFullYear()
  const month = String(pubDate.getMonth() + 1).padStart(2, '0')
  const day = String(pubDate.getDate()).padStart(2, '0')
  
  // Extract slug from the file path (remove year folder and extension)
  const slug = post.id.replace(/^\d{4}\//, '').replace(/\.(md|mdx)$/, '')
  
  return `/blog/${year}/${month}/${day}/${slug}`
}
---

<BaseLayout 
  title="Blog - Chassis Design System"
  frontmatter={{ description: "Insights, tutorials, and stories from the Chassis Design System team" }}
>
  <div class="container py-large">
    <header class="mb-xlarge text-center">
      <h1 class="h1 mb-medium">Blog</h1>
      <p class="lead text-muted">
        Insights, tutorials, and stories from the world of design systems
      </p>
    </header>

    <div class="row">
      <div class="col-12 col-lg-8 mx-auto">
        <!-- Blog posts list -->
        <div class="mb-xlarge">
          {page.data.map((post: any) => (
            <article class="mb-xlarge pb-xlarge border-bottom">
              <header class="mb-medium">
                <h2 class="h3 mb-small">
                  <a href={getBlogPostUrl(post)} class="text-decoration-none">
                    {post.data.title}
                  </a>
                </h2>
                
                <div class="d-flex align-items-center text-muted small mb-small">
                  <time datetime={post.data.pubDate?.toISOString()}>
                    {formatDate(post.data.pubDate || new Date())}
                  </time>
                  <span class="mx-small">•</span>
                  <span>{getReadingTime(post.body || '')}</span>
                  {post.data.author && (
                    <>
                      <span class="mx-small">•</span>
                      <span>by {post.data.author}</span>
                    </>
                  )}
                </div>

                {post.data.tags && post.data.tags.length > 0 && (
                  <div class="mb-small">
                    {post.data.tags.map((tag: string) => (
                      <span class="badge bg-light text-dark me-xsmall">{tag}</span>
                    ))}
                  </div>
                )}
              </header>

              <div class="mb-medium">
                <p class="text-muted">
                  {post.data.description}
                </p>
              </div>

              <footer>
                <a href={getBlogPostUrl(post)} class="btn btn-outline-primary btn-sm">
                  Read more →
                </a>
              </footer>
            </article>
          ))}
        </div>

        <!-- Pagination -->
        {page.lastPage > 1 && (
          <nav aria-label="Blog pagination" class="d-flex justify-content-center">
            <ul class="pagination">
              {page.url.prev && (
                <li class="page-item">
                  <a href={page.url.prev} class="page-link" aria-label="Previous page">
                    ← Previous
                  </a>
                </li>
              )}
              
              {Array.from({ length: page.lastPage }, (_, i) => i + 1).map((pageNum) => (
                <li class={`page-item ${pageNum === page.currentPage ? 'active' : ''}`}>
                  {pageNum === page.currentPage ? (
                    <span class="page-link" aria-current="page">{pageNum}</span>
                  ) : (
                    <a href={pageNum === 1 ? '/blog' : `/blog/${pageNum}`} class="page-link" aria-label={`Page ${pageNum}`}>
                      {pageNum}
                    </a>
                  )}
                </li>
              ))}

              {page.url.next && (
                <li class="page-item">
                  <a href={page.url.next} class="page-link" aria-label="Next page">
                    Next →
                  </a>
                </li>
              )}
            </ul>
          </nav>
        )}

        <!-- No posts message -->
        {page.data.length === 0 && (
          <div class="text-center py-xlarge">
            <h3 class="h4 mb-medium text-muted">No blog posts yet</h3>
            <p class="text-muted">
              Check back soon for insights and tutorials about design systems!
            </p>
          </div>
        )}
      </div>
    </div>
  </div>
</BaseLayout>
