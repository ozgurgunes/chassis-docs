---
import { replacePlaceholdersInHtml } from '@libs/placeholder'
import { Prism } from '@astrojs/prism'

interface Props {
  /**
   * Defines if extra JS snippet should be added to StackBlitz or not.
   * @default false
   */
  addStackblitzJs?: boolean
  /**
   * The example code.
   * If an array is passed, elements will be joined with a new line.
   */
  code: string | string[]
  /**
   * The CSS class(es) to be added to the preview wrapping `div` element.
   */
  class?: string
  /**
   * The preview wrapping `div` element ID.
   */
  id?: string
  /**
   * Language used to display the code.
   * @default 'html'
   */
  lang?: string
  /**
   * Defines if the markup should be visible or not.
   * @default true
   */
  showMarkup?: boolean
  /**
   * Defines if the preview should be visible or not.
   * @default true
   */
  showPreview?: boolean
}

const {
  addStackblitzJs = false,
  code,
  class: className,
  id,
  lang = 'html',
  showMarkup = true,
  showPreview = true
} = Astro.props

let markup = Array.isArray(code) ? code.join('\n') : code
markup = replacePlaceholdersInHtml(markup)

const simplifiedMarkup = markup
  .replace(
    /<svg.*class="cxd-placeholder-image(?:-large)?(?: *?cxd-placeholder-image-large)? ?(.*?)".*?<\/svg>/g,
    (match, classes) => `<img src="..."${classes ? ` class="${classes}"` : ''} alt="...">`
  )
  .replace(
    /<img.*class="cxd-placeholder-image(?:-large)?(?: *?cxd-placeholder-image-large)? ?(.*?)".*?>/g,
    (match, classes) => `<img src="..."${classes ? ` class="${classes}"` : ''} alt="...">`
  )
---

<script is:inline>
  // Helper to detect the user's preferred theme
  function getPreferredTheme() {
    // First check localStorage
    const storedTheme = localStorage.getItem('theme');
    if (storedTheme && storedTheme !== 'auto') {
      return storedTheme;
    }

    // Then check system preference
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  }

  // Direct theme toggle function that's globally accessible
  function toggleTheme(button) {
    const example = button.closest('.cxd-example-snippet').querySelector('.cxd-example');
    if (!example) return;

    // Get current theme - try from element, then use detection logic if not set
    let currentTheme = example.getAttribute('data-cx-theme');
    if (!currentTheme) {
      // If element doesn't have theme set, use preferred theme
      currentTheme = getPreferredTheme();
    }

    // Toggle to the opposite
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

    // Get system preferred theme
    const preferredTheme = getPreferredTheme();

    // If the new theme matches the preferred system theme, remove the attribute
    // to let it naturally follow system preference
    if (newTheme === preferredTheme) {
      example.removeAttribute('data-cx-theme');
    } else {
      // Otherwise, explicitly set the theme
      example.setAttribute('data-cx-theme', newTheme);
    }

    // Update the icon to match the theme
    const iconUse = button.querySelector('use');
    if (iconUse) {
      const iconHref = newTheme === 'dark' ? '#sun-solid' : '#moon-solid';
      iconUse.setAttribute('xlink:href', iconHref);
    }
  }

  // Initialize theme icons for all buttons based on current theme
  document.addEventListener('DOMContentLoaded', () => {
    const preferredTheme = getPreferredTheme();

    document.querySelectorAll('.button-mode').forEach((button) => {
      // Initialize tooltip
      if (window.chassis && window.chassis.Tooltip) {
        window.chassis.Tooltip.getOrCreateInstance(button);
      }

      // Set initial icon based on theme
      const iconUse = button.querySelector('use');
      if (iconUse) {
        const example = button.closest('.cxd-example-snippet')?.querySelector('.cxd-example');
        const currentTheme = example?.getAttribute('data-cx-theme') || preferredTheme;
        const iconHref = currentTheme === 'dark' ? '#sun-solid' : '#moon-solid';
        iconUse.setAttribute('xlink:href', iconHref);
      }

      // Add event listener if not already set through onclick
      if (!button.hasAttribute('onclick')) {
        button.addEventListener('click', () => toggleTheme(button));
      }
    });
  });
</script>

<div class="cxd-example-snippet cxd-code-snippet">
  {
    showPreview && (
      <div id={id} class:list={['cxd-example m-0 border-0 context', className]}>
        { !showMarkup && (
          <div class="cxd-mode">
              <button
                type="button"
                class="button-mode mt-0 me-0 text-nowrap"
                title="Toggle color mode"
                onclick="toggleTheme(this)"
              >
                <svg class="icon" aria-hidden="true">
                  <use xlink:href="#swatchbook-solid" />
                </svg>
              </button>
              </div>
        )}
        <Fragment set:html={markup} />
      </div>
    )
  }

  {
    showMarkup && (
      <>
        {showPreview && (
          <div class="d-flex align-items-center highlight-toolbar ps-medium pe-xsmall py-2xsmall border-0 border-top border-bottom border-subtle">
            <small class="font-monospace fg-subtle text-uppercase">{lang}</small>
            <div class="d-flex ms-auto">
              <button
                type="button"
                class="button-mode mt-0 me-0 text-nowrap"
                title="Toggle color mode"
                onclick="toggleTheme(this)"
              >
                <svg class="icon" aria-hidden="true">
                  <use xlink:href="#swatchbook-solid" />
                </svg>
              </button>
              <span class="vr mx-xsmall"></span>
              <button
                type="button"
                class="button-edit text-nowrap"
                title="Try it on StackBlitz"
                data-sb-js-snippet={addStackblitzJs ? true : undefined}
              >
                <svg class="icon" aria-hidden="true">
                  <use xlink:href="#lightning-solid" />
                </svg>
              </button>
              <button type="button" class="button-clipboard mt-0 me-0" title="Copy to clipboard">
                <svg class="icon" aria-hidden="true">
                  <use xlink:href="#clipboard-outline" />
                </svg>
              </button>
            </div>
          </div>
        )}
        <div class="highlight">
          <Prism code={simplifiedMarkup} lang={lang} />
        </div>
      </>
    )
  }
</div>
