---
import type { MarkdownHeading } from 'astro'
import type { CollectionEntry } from 'astro:content'
import { getConfig } from '@libs/config'
import type { LayoutOverridesHTMLAttributes } from '@libs/layout'
import { getSlug, processMarkdownToHtml } from '@libs/utils'
import Ads from '@components/Ads.astro'
import BaseLayout from '@layouts/BaseLayout.astro'
import DocsSidebar from '@components/DocsSidebar.astro'
import TableOfContents from '@components/TableOfContents.astro'

interface Props {
  frontmatter: CollectionEntry<'blog'>['data']
  headings?: MarkdownHeading[]
  id: CollectionEntry<'blog'>['id']
}

const { frontmatter, headings, id } = Astro.props

// Extract the directory/section from the ID (format: "directory/filename.mdx")
const parentDirectory = id.includes('/') ? id.split('/')[0] : ''

const bodyProps: LayoutOverridesHTMLAttributes<'body'> = {}

if (frontmatter.toc) {
  bodyProps['data-cx-spy'] = 'scroll'
  bodyProps['data-cx-target'] = '#TableOfContents'
}
---

<BaseLayout {...Astro.props} layout="docs" overrides={{ body: bodyProps }}>
  <div slot="main" class="container-2xlarge cxd-gutter mt-medium my-medium-4 cxd-layout">
    <aside class="cxd-sidebar">
      <div class="offcanvas-large offcanvas-start" tabindex="-1" id="cxdSidebar" aria-labelledby="cxdSidebarOffcanvasLabel">
        <div class="offcanvas-header border-bottom">
          <h5 class="offcanvas-title" id="cxdSidebarOffcanvasLabel">Browse docs</h5>
          <button
            type="button"
            class="close-button"
            data-cx-dismiss="offcanvas"
            aria-label="Close"
            data-cx-target="#cxdSidebar"></button>
        </div>

        <div class="offcanvas-body">
          <DocsSidebar />
        </div>
      </div>
    </aside>

    <main class="cxd-main order-1">
      <div class="cxd-intro pt-xsmall ps-large-2">
        <div class="d-medium-flex flex-medium-row-reverse align-items-center justify-content-between">
          <div class="mb-medium mb-medium-0 d-flex text-nowrap">
            {
              // This is needed because we want to show the badge if show_badge isn't present or is set to false
              frontmatter.added &&
                ((frontmatter.added.show_badge !== undefined && frontmatter.added.show_badge === true) ||
                  frontmatter.added.show_badge === undefined) && (
                  <small class="d-inline-flex px-xsmall py-2xsmall fw-semibold text-success-emphasis bg-success-subtle border border-success-subtle rounded-2 me-xsmall">
                    Added in v{frontmatter.added.version}
                  </small>
                )
            }
            <a
              class="button default small"
              href={`${getConfig().repo}/blob/v${getConfig().current_version}/site/src/content/${id}`}
              title="View and edit this file on GitHub"
              target="_blank"
              rel="noopener"
            >
              View on GitHub
            </a>
          </div>
          <h1 class="cxd-title mb-0" id="content">{frontmatter.title}</h1>
        </div>
        <div class="cxd-subtitle">
          {frontmatter.description && <Fragment set:html={processMarkdownToHtml(frontmatter.description)} />}
        </div>
        <Ads />
      </div>

      {
        frontmatter.toc && headings && (
          <div class="cxd-toc mt-medium mb-xlarge my-large-0 mb-large-5 px-xsmall-1 fg-subtle">
            <button
              class="button link p-medium-0 mb-xsmall mb-medium-0 text-decoration-none cxd-toc-toggle d-medium-none"
              type="button"
              data-cx-toggle="collapse"
              data-cx-target="#tocContents"
              aria-expanded="false"
              aria-controls="tocContents"
            >
              On this page
              <svg class="bi d-medium-none ms-xsmall" aria-hidden="true">
                <use xlink:href="#chevron-sort-solid" />
              </svg>
            </button>
            <strong class="d-none d-medium-block h6 my-xsmall ms-medium">On this page</strong>
            <hr class="d-none d-medium-block my-xsmall ms-medium" />
            <div class="collapse cxd-toc-collapse" id="tocContents">
              <nav id="TableOfContents">
                <TableOfContents headings={headings} />
              </nav>
            </div>
          </div>
        )
      }

      <div class="cxd-content ps-large-2">
        {
          frontmatter.sections && (
            <div class="row g-3">
              {frontmatter.sections.map((section) => (
                <div class="col-medium-6">
                  <a
                    class="d-block text-decoration-none"
                    href={`${parentDirectory ? parentDirectory + '/' : ''}${getSlug(section.title)}/`}
                  >
                    <strong class="d-block h5 mb-0">{section.title}</strong>
                    <span class="fg-subtle">{section.description}</span>
                  </a>
                </div>
              ))}
            </div>
          )
        }

        <slot />
      </div>
    </main>
  </div>
</BaseLayout>
